"""
The following code allows the user to use mergesort to sort an array
it also incorporates the merge aspect of the code
"""
import math

def merge(h, m, tempArr, tempArr2, mainArr):
   
    #indexes of: 
    i = 1   #first subarray
    j = 1   #second subarray
    k = 1   #merged array

    #The actual merging process
    while i<h and j<m:
        if(tempArr[i] < tempArr2[j]):  #if the value at A1[i] is the smaller one, it gets added first
            mainArr[k] = tempArr[i]
            i+=1
        else:               #Otherwise, A2[j] is added instead
            mainArr[k] = tempArr2[j]
            j+=1
        k+=1

    #double checks if there is ANY term that still needs to be added in
    while i < h:
        mainArr[k] = tempArr[i]
        i += 1
        k += 1

    while i < m:
        mainArr[k] = tempArr2[j]
        j += 1
        k += 1
        

def mergeSort(n, mainArr):
   if n > 1:

       h = math.floor(n//2)
       m = n-h

       #sorts the first halves
       mergeSort(h, tempArr)
       mergeSort(m, tempArr2)
       merge(h, m, tempArr, tempArr2, mainArr)


#Driver code
tempArr = []
tempArr2 = []
mainArr = [2, 5, 31, 16, 23, 5]
n = len(mainArr) #length of the array
print("The original array is: ")
for(i) in range(n):
    print("%d" % mainArr[i], end=" ")

mergeSort(mainArr, 0, n-1)

print("\nSorted array list: ")
for(i) in range(n):
    print("%d" % mainArr[i], end=" ")
